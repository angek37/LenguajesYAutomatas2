import java.io.*;
import java_cup.runtime.*;

parser code
{:
  public static void main(String[] args) throws Exception{
    new parser(new Yylex(System.in)).parse();
  }
  public void Syntax_error(Symbol s){
    report_error("Error de sintaxis linea"+ Integer.toString(Yylex.linea+1)+
      "Columna: "+ Integer.toString(Yylex.pos + 1 ) + "En \""+ s.value + "\"", null);
  }
:}

action code
{:
  int integer = 1;
:}

terminal String SEMI, PLUS, MINUS, DIVIDE, TIMES, LPAREN, RPAREN, MOD;
terminal Integer NUMBER;
terminal PUNTO;

non terminal expr_list, expr_part;
non terminal Integer expr;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;

expr_list ::= expr_list expr_part
            | expr_part
            ;

expr_part ::= expr:e SEMI {: System.out.println("Operación exitosa resultado = "
                                                    + e.intValue());:}
            | PUNTO {: System.out.println("Archivo procesado exitosamente ");
            System.exit(1);
              :}
              ;

expr ::= NUMBER:n {:RESULT = n;:}
      | expr:l PLUS expr:r {:RESULT = new Integer(l.intValue() + r.intValue());:}
      | expr:l MINUS expr:r {:RESULT = new Integer(l.intValue() + r.intValue());:}
      | expr:l DIVIDE expr:r {:if(r.intValue() != 0){ RESULT = new Integer(l.intValue() / r.intValue());}
      else{
        System.out.println("Error semántico, división por cero");
        System.exit(1);
      }:}
      | expr:l MOD expr:r {:RESULT = new Integer(l.intValue()%r.intValue());:}
      | expr:l TIMES expr:r {:RESULT = new Integer(l.intValue()*r.intValue());:}
      | expr:l LPAREN expr:e RPAREN{:RESULT=e;:}
      | error SEMI {:System.out.println("Error de sintaxis");:}
      ;

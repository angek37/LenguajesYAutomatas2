import java.io.*;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;

parser code
{:
  public static void main(String[] args) throws Exception{
    new parser(new Yylex(System.in)).parse();
  }
  public void Syntax_error(Symbol s){
    report_error("Error de sintaxis linea"+ Integer.toString(Yylex.linea+1)+
      "Columna: "+ Integer.toString(Yylex.pos + 1 ) + "En \""+ s.value + "\"", null);
  }
:}

action code
{:
  Map<String, Integer> map = new HashMap<String, Integer>();
:}

terminal GREATER, GREATEREQUAL, LESS, LESSEQUAL, EQUAL, NOTEQUAL;
terminal DIVIDE, TIMES, LPAREN, RPAREN, PLUS, MINUS, AND, OR, NOT;
terminal ID, ASSIGN, SEMI;
terminal Boolean BOOL;
terminal Integer INTEGER;

non terminal stmt, stmt_part, stmt_list, expr, log_factor, arithm_term, arithm_factor;
non terminal Integer arithm_expr;
non terminal Boolean relation_expr, log_term;


precedence left AND, OR, NOT;
precedence left EQUAL, NOTEQUAL;
precedence left GREATER, GREATEREQUAL, LESS, LESSEQUAL;
precedence left PLUS, MINUS;
precedence left DIVIDE, TIMES;
precedence left ASSIGN;


stmt        ::= stmt stmt_part
            | stmt_part
            ;

stmt_part   ::= stmt_list SEMI
            ;

stmt_list   ::= expr
            | ID ASSIGN expr
            ;

expr        ::= log_term
            | relation_expr
            | arithm_expr
            ;

log_term    ::= log_term AND log_factor
            | log_term OR log_factor
            | log_factor
            ;

log_factor  ::= BOOL
            | NOT log_factor
            | LPAREN log_term RPAREN
            | LPAREN relation_expr RPAREN
            ;

relation_expr ::= arithm_expr GREATER arithm_expr
            | arithm_expr GREATEREQUAL arithm_expr
            | arithm_expr LESS arithm_expr
            | arithm_expr LESSEQUAL arithm_expr
            | arithm_expr EQUAL arithm_expr
            | arithm_expr NOTEQUAL arithm_expr
            ;
arithm_expr ::= arithm_term
            | arithm_expr TIMES arithm_term
            | arithm_expr DIVIDE arithm_term
            ;

arithm_term ::= arithm_factor
            | arithm_term PLUS arithm_factor
            | arithm_term MINUS arithm_factor
            ;

arithm_factor ::= ID
            | INTEGER
            | LPAREN arithm_expr RPAREN
            ;

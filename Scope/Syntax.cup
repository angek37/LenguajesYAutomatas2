import java.io.*;
import java_cup.runtime.*;

parser code
{:
  public static void main(String[] args) throws Exception{
    new parser(new Yylex(System.in)).parse();
  }
  public void Syntax_error(Symbol s){
    report_error("Error de sintaxis linea"+ Integer.toString(Yylex.linea+1)+
      "Columna: "+ Integer.toString(Yylex.pos + 1 ) + "En \""+ s.value + "\"", null);
  }
:}

action code
{:
  Tree t = new Tree();
:}

terminal CLASS, ACCESS, LBRACKET, RBRACKET, TYPEINT, TYPEDOUBLE, TYPEBOOLEAN, VOID, IF, WHILE;

terminal LPAREN, RPAREN;
terminal ID, ASSIGN, SEMI;
terminal Double DOUBLE;
terminal Integer INTEGER;
terminal boolean BOOLEAN;

non terminal program, decl, declstmt, stmts, type, value, function, flowctrl, flow;



program         ::=   ACCESS CLASS ID:id LBRACKET declstmt stmts RBRACKET
                {: t.initTree(""+id, "clase");
                t.Print();:}
                |     CLASS ID:id LBRACKET declstmt stmts RBRACKET
                {: t.initTree(""+id, "clase"); :}
                ;



declstmt        ::=   decl declstmt
                |
                {:
                t.scope ++;
                :}
                ;

decl            ::=   type ID:id ASSIGN value:v SEMI
                {:
                if(t.scope > 0){
                  if(t.scope > 1){
                    t.tmpR.add(""+id, v);
                    t.Print();
                  }else {
                  t.tmpL.add(""+id, v);
                  t.Print();
                  }
                }else{
                  t.root.children.add(""+id, v);
                  t.Print();
                }
                :}
                ;

stmts           ::=   function stmts
                |
                ;

function        ::=   ACCESS type ID:id LPAREN RPAREN LBRACKET declstmt flowctrl RBRACKET
                {:
                t.root.children.add(""+id, new Object());
                t.root.children.getNode(""+id).children = t.tmpL;
                t.tmpL = new List();
                t.scope --;
                t.Print();:}
                ;

flowctrl        ::=   flow flowctrl
                |
                ;

flow            ::=   IF LPAREN RPAREN LBRACKET declstmt RBRACKET
                {:
                String tmp = t.getRandom();
                t.tmpL.add(tmp, tmp + "");
                t.tmpL.getNode(tmp).children = t.tmpR;
                t.tmpR = new List();
                t.scope --;
                :}
                |     WHILE LPAREN RPAREN LBRACKET declstmt RBRACKET
                {:
                String tmp = t.getRandom();
                t.tmpL.add(tmp, tmp + "");
                t.tmpL.getNode(tmp).children = t.tmpR;
                t.tmpR = new List();
                t.scope --;
                :}
                ;

type            ::=   TYPEINT
                |     TYPEDOUBLE
                |     TYPEBOOLEAN
                |     VOID
                ;

value           ::=   INTEGER:n
                {: RESULT = n; :}
                |     DOUBLE:n
                {: RESULT = n; :}
                |     BOOLEAN:n
                {: RESULT = n; :}
                ;
